// Copyright (c) 2020 The Orbit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package orbit_grpc_protos;

import "module.proto";
import "tracepoint.proto";

// This is needed by LockFreeBufferCaptureEventProducer.
option cc_enable_arenas = true;

message CaptureOptions {
  bool trace_context_switches = 1;
  int32 pid = 2;
  double sampling_rate = 3;

  enum UnwindingMethod {
    kUndefined = 0;
    kFramePointers = 1;
    kDwarf = 2;
  }
  UnwindingMethod unwinding_method = 4;

  message InstrumentedFunction {
    string file_path = 1;
    uint64 file_offset = 2;
    uint64 function_id = 3;

    enum FunctionType {
      kRegular = 0;
      kTimerStart = 1;
      kTimerStop = 2;
    }
    FunctionType function_type = 4;
  }

  repeated InstrumentedFunction instrumented_functions = 5;

  bool trace_thread_state = 8;

  bool trace_gpu_driver = 6;

  repeated TracepointInfo instrumented_tracepoint = 7;

  bool enable_introspection = 9;

  uint64 max_local_marker_depth_per_command_buffer = 10;

  bool bulk_capture_events = 11;
}

// For CaptureEvents with a duration, excluding for now GPU-related ones, we
// represent the time interval as (duration_ns, end_timestamp_ns). As durations
// are smaller in magnitude than absolute timestamps, and as protobufs use
// variable-length encoding, this saves some bandwidth compared to
// (start_timestamp_ns, end_timestamp_ns).
// The pair (duration_ns, end_timestamp_ns) was preferred over
// (start_timestamp_ns, duration_ns) because this way, when perf_event_open
// events are processed in order, the CaptureEvents are sorted by the only
// absolute timestamp contained in them (as they are obviously generated when
// the "end" perf_event_open event is processed).

message SchedulingSlice {
  reserved 4;
  int32 pid = 1;
  int32 tid = 2;
  int32 core = 3;
  uint64 duration_ns = 6;
  uint64 out_timestamp_ns = 5;
}

message FunctionCall {
  reserved 4;
  int32 pid = 1;
  int32 tid = 2;
  uint64 function_id = 3;
  uint64 duration_ns = 9;
  uint64 end_timestamp_ns = 5;
  int32 depth = 6;
  uint64 return_value = 7;
  repeated uint64 registers = 8;
}

message IntrospectionScope {
  reserved 3;
  int32 pid = 1;
  int32 tid = 2;
  uint64 duration_ns = 7;
  uint64 end_timestamp_ns = 4;
  int32 depth = 5;
  repeated uint64 registers = 6;
}

message ApiEvent {
  uint64 num_raw_events = 1;
  // bytes raw_data = 2;
  repeated fixed64 raw_data = 3;
}

/*
message ApiEventFixed {
  uint64 timestamp_ns = 1;
  int32 pid = 2;
  int32 tid = 3;
  uint32 type = 4;
  uint32 color = 5;
  uint64 data = 6;
  fixed64 d0 = 7;
  fixed64 d1 = 8;
  fixed64 d2 = 9;
  fixed64 d3 = 10;
  fixed64 d4 = 11;
}*/

message ApiEventFixed {
  uint64 timestamp_ns = 1;
  int32 pid = 2;
  int32 tid = 3;
  uint32 type = 4;
  uint32 color = 5;
  uint64 data = 6;
  fixed64 d0 = 7;
  fixed64 d1 = 8;
  fixed64 d2 = 9;
  fixed64 d3 = 10;
  fixed64 d4 = 11;
}

message Callstack {
  repeated uint64 pcs = 1;
}

message InternedCallstack {
  uint64 key = 1;
  Callstack intern = 2;
}

message CallstackSample {
  int32 pid = 1;
  int32 tid = 2;
  uint64 callstack_id = 3;
  uint64 timestamp_ns = 4;
}

message FullCallstackSample {
  int32 pid = 1;
  int32 tid = 2;
  Callstack callstack = 3;
  uint64 timestamp_ns = 4;
}

message InternedString {
  uint64 key = 1;
  string intern = 2;
}

message InternedTracepointInfo {
  uint64 key = 1;
  TracepointInfo intern = 2;
}

message TracepointEvent {
  int32 pid = 1;
  int32 tid = 2;
  uint64 timestamp_ns = 3;
  int32 cpu = 4;
  uint64 tracepoint_info_key = 5;
}

message FullTracepointEvent {
  int32 pid = 1;
  int32 tid = 2;
  uint64 timestamp_ns = 3;
  int32 cpu = 4;
  TracepointInfo tracepoint_info = 5;
}

message FullGpuJob {
  int32 pid = 1;
  int32 tid = 2;
  uint32 context = 3;
  uint32 seqno = 4;
  int32 depth = 5;
  uint64 amdgpu_cs_ioctl_time_ns = 6;
  uint64 amdgpu_sched_run_job_time_ns = 7;
  uint64 gpu_hardware_start_time_ns = 8;
  uint64 dma_fence_signaled_time_ns = 9;
  string timeline = 10;
}

message GpuJob {
  int32 pid = 1;
  int32 tid = 2;
  uint32 context = 3;
  uint32 seqno = 4;
  int32 depth = 5;
  uint64 amdgpu_cs_ioctl_time_ns = 6;
  uint64 amdgpu_sched_run_job_time_ns = 7;
  uint64 gpu_hardware_start_time_ns = 8;
  uint64 dma_fence_signaled_time_ns = 9;
  uint64 timeline_key = 10;
}

message GpuQueueSubmission {
  GpuQueueSubmissionMetaInfo meta_info = 1;
  repeated GpuSubmitInfo submit_infos = 2;
  repeated GpuDebugMarker completed_markers = 3;
  // This is the total number of begin markers submitted in this submission.
  int32 num_begin_markers = 4;
}

message GpuQueueSubmissionMetaInfo {
  int32 tid = 1;
  uint64 pre_submission_cpu_timestamp = 2;
  uint64 post_submission_cpu_timestamp = 3;
}

message GpuSubmitInfo {
  repeated GpuCommandBuffer command_buffers = 1;
}

message GpuCommandBuffer {
  uint64 begin_gpu_timestamp_ns = 1;
  uint64 end_gpu_timestamp_ns = 2;
}

message GpuDebugMarkerBeginInfo {
  // Begin markers can be submitted in a different submission then the end
  // markers, thus the submission meta info of a begin marker might differ from
  // the one of the submission containing the complete debug marker.
  GpuQueueSubmissionMetaInfo meta_info = 1;
  uint64 gpu_timestamp_ns = 2;
}

message GpuDebugMarker {
  GpuDebugMarkerBeginInfo begin_marker = 1;
  uint64 end_gpu_timestamp_ns = 2;
  uint64 text_key = 3;
  int32 depth = 4;
  Color color = 5;
}

message Color {
  // Color ranges are [0.f, 1.f] for the following fields.
  float red = 1;
  float green = 2;
  float blue = 3;
  float alpha = 4;
}

message ThreadName {
  int32 pid = 1;
  int32 tid = 2;
  string name = 3;
  uint64 timestamp_ns = 4;
}

message ThreadStateSlice {
  reserved 4;
  int32 pid = 1;  // pid is currently not set as we don't have the information.
  int32 tid = 2;

  // These are the ones listed in
  // /sys/kernel/debug/tracing/events/sched/sched_switch/format and in
  // https://github.com/torvalds/linux/blob/master/fs/proc/array.c in
  // task_state_array[], with the difference that the OS doesn't distinguish
  // between "running" (scheduled on a CPU) and "runnable" (ready to be
  // scheduled but not actually scheduled), rather they are the same state
  // (often referred to as "running", sometimes as "runnable or running").
  enum ThreadState {
    kRunning = 0;
    kRunnable = 1;
    kInterruptibleSleep = 2;
    kUninterruptibleSleep = 3;
    kStopped = 4;
    kTraced = 5;
    kDead = 6;
    kZombie = 7;
    kParked = 8;
    kIdle = 9;
  }
  ThreadState thread_state = 3;

  uint64 duration_ns = 6;
  uint64 end_timestamp_ns = 5;
}

message AddressInfo {
  uint64 absolute_address = 1;
  uint64 offset_in_function = 2;
  uint64 function_name_key = 3;
  uint64 module_name_key = 4;
}

message FullAddressInfo {
  uint64 absolute_address = 1;
  uint64 offset_in_function = 2;
  string function_name = 3;
  string module_name = 4;
}

message ModuleUpdateEvent {
  int32 pid = 1;
  uint64 timestamp_ns = 2;
  ModuleInfo module = 3;
}

message ClientCaptureEvent {
  oneof event {
    // Please keep these alphabetically ordered.
    AddressInfo address_info = 1;
    ApiEvent api_event = 16;
    ApiEventFixed api_event_fixed = 17;
    CallstackSample callstack_sample = 2;
    FunctionCall function_call = 3;
    GpuJob gpu_job = 4;
    GpuQueueSubmission gpu_queue_submission = 5;
    InternedCallstack interned_callstack = 6;
    InternedString interned_string = 7;
    InternedTracepointInfo interned_tracepoint_info = 8;
    IntrospectionScope introspection_scope = 9;
    ModuleUpdateEvent module_update_event = 10;
    SchedulingSlice scheduling_slice = 11;
    ThreadName thread_name = 12;
    ThreadStateSlice thread_state_slice = 13;
    TracepointEvent tracepoint_event = 14;
  }
}

message ProducerCaptureEvent {
  oneof event {
    // Please keep these alphabetically ordered.
    ApiEvent api_event = 16;
    ApiEventFixed api_event_fixed = 17;
    CallstackSample callstack_sample = 1;
    FullCallstackSample full_callstack_sample = 2;
    FullAddressInfo full_address_info = 3;
    FullGpuJob full_gpu_job = 4;
    FullTracepointEvent full_tracepoint_event = 5;
    FunctionCall function_call = 6;
    GpuQueueSubmission gpu_queue_submission = 7;
    InternedCallstack interned_callstack = 8;
    InternedString interned_string = 9;
    IntrospectionScope introspection_scope = 10;
    ModuleUpdateEvent module_update_event = 11;
    SchedulingSlice scheduling_slice = 12;
    ThreadName thread_name = 13;
    ThreadStateSlice thread_state_slice = 14;
  }
}
