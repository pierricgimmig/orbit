# Copyright (c) 2022 The Orbit Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

cmake_minimum_required(VERSION 3.15)

project(WindowsApiShim)

# Enable MASM assembler with workaround for the following error: 
# "MSVC_RUNTIME_LIBRARY value 'MultiThreadedDebugDLL' not known for this. ASM_MASM compiler."
set(CMAKE_MSVC_RUNTIME_LIBRARY "")
enable_language(ASM_MASM)

add_executable(WindowsApiShimGenerator)

# Setup debugger working directory so that we have the same relative paths when running the executable as when debugging.
set_property(TARGET WindowsApiShimGenerator PROPERTY VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

target_sources(WindowsApiShimGenerator PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/FileWriter.cpp
        ${CMAKE_CURRENT_LIST_DIR}/FileWriter.h
        ${CMAKE_CURRENT_LIST_DIR}/main.cpp)

target_link_libraries(WindowsApiShimGenerator PUBLIC
        OrbitBase
        CONAN_PKG::abseil
        CONAN_PKG::outcome
        cppwin32::cppwin32)

# Code generation output directory for WindowsApiShimGenerator.
set(WINDOWS_API_SHIM_GENERATED_DIR ${CMAKE_CURRENT_BINARY_DIR}/generated)

# "WindowsApiShim.cmake" is generated by WindowsApiShimGenerator and triggers a re-configure when changed.
set(WINDOWS_API_SHIM_GENERATED_CMAKE "${WINDOWS_API_SHIM_GENERATED_DIR}/WindowsApiShim.cmake")

# Custom command to invoke the code generation and output the "WindowsApiShim.cmake" file.
add_custom_command(
        OUTPUT ${WINDOWS_API_SHIM_GENERATED_CMAKE}
        DEPENDS WindowsApiShimGenerator
        COMMAND WindowsApiShimGenerator
        COMMENT "Running WindowsApiShimGenerator"
)

# Custom target that depends on the generated "WindowsApiShim.cmake" file which will invoke the generator.
add_custom_target( RunGenerator ALL
        DEPENDS ${WINDOWS_API_SHIM_GENERATED_CMAKE}
)

# WindowsApiShim
add_library(WindowsApiShim STATIC)

# WindowsApiShim relies on code generated by WindowsApiShimGenerator.
add_dependencies(WindowsApiShim RunGenerator)

# Workaround for the fact that cmake cannot "configure-depend" on non existing file.
# See https://gitlab.kitware.com/cmake/cmake/-/issues/18755.
if( NOT EXISTS ${WINDOWS_API_SHIM_GENERATED_CMAKE})
        file(WRITE ${WINDOWS_API_SHIM_GENERATED_CMAKE} "")
endif()

# Force a re-configure when "WindowsApiShim.cmake" is (re)generated.
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${WINDOWS_API_SHIM_GENERATED_CMAKE})

target_include_directories(WindowsApiShim PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
        ${WINDOWS_API_SHIM_GENERATED_DIR})

# Include generated .cmake file which lists all the generated files 
# and defines WINDOWS_API_SHIM_HEADERS and WINDOWS_API_SHIM_SOURCES.
include(${WINDOWS_API_SHIM_GENERATED_CMAKE})
source_group("Generated Headers" FILES ${WINDOWS_API_SHIM_HEADERS})
source_group("Generated Sources" FILES ${WINDOWS_API_SHIM_SOURCES})

target_include_directories(WindowsApiShim PUBLIC
        ${WINDOWS_API_SHIM_GENERATED_DIR}/
        ${CMAKE_CURRENT_LIST_DIR}/include/)

target_sources(WindowsApiShim PUBLIC
        ${WINDOWS_API_SHIM_HEADERS})

target_sources(WindowsApiShim PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/CaptureController.cpp
        ${CMAKE_CURRENT_LIST_DIR}/CaptureController.h
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiShim.asm
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiShimUtils.h
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiCallManager.cpp
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiCallManager.h
        ${WINDOWS_API_SHIM_SOURCES}
        ${WINDOWS_API_SHIM_GENERATED_CMAKE})

target_link_libraries(WindowsApiShim PUBLIC
        ApiInterface
        CaptureEventProducer
        OrbitBase
        WindowsUtils
        minhook
        CONAN_PKG::abseil)

# /bigobj is needed to prevent: fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj.
add_definitions(/bigobj)

add_library(WindowsApiShimDll SHARED)
set_target_properties(WindowsApiShimDll PROPERTIES OUTPUT_NAME "OrbitWindowsApiShim")

target_sources(WindowsApiShimDll PUBLIC
        ${CMAKE_CURRENT_LIST_DIR}/include/WindowsApiShim/WindowsApiShim.h)

target_sources(WindowsApiShimDll PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiShim.cpp)

target_link_libraries(WindowsApiShimDll PUBLIC
        WindowsApiShim)
