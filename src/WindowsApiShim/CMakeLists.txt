# Copyright (c) 2021 The Orbit Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

cmake_minimum_required(VERSION 3.15)

project(WindowsApiShim)

# WindowsApiShimGenerator
add_executable(WindowsApiShimGenerator)
target_compile_features(WindowsApiShimGenerator PUBLIC cxx_std_17)

# Code generation output directory for WindowsApiShimGenerator.
set(GENERATED_DIR ${CMAKE_CURRENT_BINARY_DIR}/generated)

# The manifest file is generated by the WindowsApiShimGenerator.
# Whenever this file is deleted, the generator is rerun.
set(GENERATOR_MANIFEST_FILE ${GENERATED_DIR}/win32/manifest.h)

# So that we can use the same relative paths when running the executable as when debugging.
set_property(TARGET WindowsApiShimGenerator PROPERTY VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

message( STATUS "CMAKE_CURRENT_LIST_DIR = ${CMAKE_CURRENT_LIST_DIR}")

target_sources(WindowsApiShimGenerator PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/FileWriter.cpp
        ${CMAKE_CURRENT_LIST_DIR}/FileWriter.h
        ${CMAKE_CURRENT_LIST_DIR}/main.cpp)

target_link_libraries(WindowsApiShimGenerator PUBLIC
        OrbitBase
        CONAN_PKG::abseil
        CONAN_PKG::outcome
        cppwin32::cppwin32)

# Remove the generated manifest file when rebuilding the generator to force re-generation.
add_custom_command(
        TARGET WindowsApiShimGenerator
        COMMAND ${CMAKE_COMMAND} -E remove -f ${GENERATOR_MANIFEST_FILE}
        COMMENT "Deleting manifest file")

# Code generation is triggered when ${GENERATOR_MANIFEST_FILE} is missing.
add_custom_target( RunGenerator DEPENDS ${GENERATOR_MANIFEST_FILE} )
add_custom_command(
        OUTPUT ${GENERATOR_MANIFEST_FILE}
        COMMAND WindowsApiShimGenerator
        COMMENT "Running WindowsApiShimGenerator")

if (WIN32)

# WindowsApiShim
add_library(WindowsApiShim STATIC)

target_compile_features(WindowsApiShim PUBLIC cxx_std_17)

target_include_directories(WindowsApiShim PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
        ${GENERATED_DIR})

file(GLOB WINDOWS_API_SHIM_HEADERS
        ${GENERATED_DIR}/win32/*.h)
source_group("Generated Headers" FILES ${WINDOWS_API_SHIM_HEADERS})

file(GLOB WINDOWS_API_SHIM_SOURCES
        ${GENERATED_DIR}/win32/impl/*.h
        ${GENERATED_DIR}/win32/impl/*.cpp)
source_group("Generated Sources" FILES ${WINDOWS_API_SHIM_SOURCES})

target_include_directories(WindowsApiShim PUBLIC
        ${GENERATED_DIR}/
        ${CMAKE_CURRENT_LIST_DIR}/include/)

target_sources(WindowsApiShim PUBLIC
        ${WINDOWS_API_SHIM_HEADERS})

target_sources(WindowsApiShim PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/CaptureController.cpp
        ${CMAKE_CURRENT_LIST_DIR}/CaptureController.h
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiShimUtils.h
        ${GENERATOR_MANIFEST_FILE}
        ${WINDOWS_API_SHIM_SOURCES})

target_link_libraries(WindowsApiShim PUBLIC
        ApiInterface
        CaptureEventProducer
        OrbitBase
        minhook
        CONAN_PKG::abseil)

# WindowsApiShim relies on code generated by WindowsApiShimGenerator.
add_dependencies(WindowsApiShim RunGenerator)

#fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj
add_definitions(/bigobj)

add_library(WindowsApiShimDll SHARED)
target_compile_features(WindowsApiShimDll PUBLIC cxx_std_17)
set_target_properties(WindowsApiShimDll PROPERTIES OUTPUT_NAME "OrbitWindowsApiShim")

target_sources(WindowsApiShimDll PUBLIC
        ${CMAKE_CURRENT_LIST_DIR}/include/WindowsApiShim/WindowsApiShim.h)

target_sources(WindowsApiShimDll PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/WindowsApiShim.cpp)

target_link_libraries(WindowsApiShimDll PUBLIC
        WindowsApiShim)

endif()